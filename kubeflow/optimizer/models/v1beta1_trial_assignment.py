# coding: utf-8

"""
    Katib

    Swagger description for Katib  # noqa: E501

    The version of the OpenAPI document: v1beta1-0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubeflow.optimizer.configuration import Configuration


class V1beta1TrialAssignment(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'early_stopping_rules': 'list[V1beta1EarlyStoppingRule]',
        'labels': 'dict(str, str)',
        'name': 'str',
        'parameter_assignments': 'list[V1beta1ParameterAssignment]'
    }

    attribute_map = {
        'early_stopping_rules': 'earlyStoppingRules',
        'labels': 'labels',
        'name': 'name',
        'parameter_assignments': 'parameterAssignments'
    }

    def __init__(self, early_stopping_rules=None, labels=None, name=None, parameter_assignments=None, local_vars_configuration=None):  # noqa: E501
        """V1beta1TrialAssignment - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._early_stopping_rules = None
        self._labels = None
        self._name = None
        self._parameter_assignments = None
        self.discriminator = None

        if early_stopping_rules is not None:
            self.early_stopping_rules = early_stopping_rules
        if labels is not None:
            self.labels = labels
        if name is not None:
            self.name = name
        if parameter_assignments is not None:
            self.parameter_assignments = parameter_assignments

    @property
    def early_stopping_rules(self):
        """Gets the early_stopping_rules of this V1beta1TrialAssignment.  # noqa: E501

        Rules for early stopping techniques Contains rule name, value and comparison type  # noqa: E501

        :return: The early_stopping_rules of this V1beta1TrialAssignment.  # noqa: E501
        :rtype: list[V1beta1EarlyStoppingRule]
        """
        return self._early_stopping_rules

    @early_stopping_rules.setter
    def early_stopping_rules(self, early_stopping_rules):
        """Sets the early_stopping_rules of this V1beta1TrialAssignment.

        Rules for early stopping techniques Contains rule name, value and comparison type  # noqa: E501

        :param early_stopping_rules: The early_stopping_rules of this V1beta1TrialAssignment.  # noqa: E501
        :type: list[V1beta1EarlyStoppingRule]
        """

        self._early_stopping_rules = early_stopping_rules

    @property
    def labels(self):
        """Gets the labels of this V1beta1TrialAssignment.  # noqa: E501

        Suggestion label metadata to attach to Trial job  # noqa: E501

        :return: The labels of this V1beta1TrialAssignment.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this V1beta1TrialAssignment.

        Suggestion label metadata to attach to Trial job  # noqa: E501

        :param labels: The labels of this V1beta1TrialAssignment.  # noqa: E501
        :type: dict(str, str)
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this V1beta1TrialAssignment.  # noqa: E501

        Name of the suggestion  # noqa: E501

        :return: The name of this V1beta1TrialAssignment.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V1beta1TrialAssignment.

        Name of the suggestion  # noqa: E501

        :param name: The name of this V1beta1TrialAssignment.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def parameter_assignments(self):
        """Gets the parameter_assignments of this V1beta1TrialAssignment.  # noqa: E501

        Suggestion results with Trial parameters  # noqa: E501

        :return: The parameter_assignments of this V1beta1TrialAssignment.  # noqa: E501
        :rtype: list[V1beta1ParameterAssignment]
        """
        return self._parameter_assignments

    @parameter_assignments.setter
    def parameter_assignments(self, parameter_assignments):
        """Sets the parameter_assignments of this V1beta1TrialAssignment.

        Suggestion results with Trial parameters  # noqa: E501

        :param parameter_assignments: The parameter_assignments of this V1beta1TrialAssignment.  # noqa: E501
        :type: list[V1beta1ParameterAssignment]
        """

        self._parameter_assignments = parameter_assignments

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1beta1TrialAssignment):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1beta1TrialAssignment):
            return True

        return self.to_dict() != other.to_dict()
