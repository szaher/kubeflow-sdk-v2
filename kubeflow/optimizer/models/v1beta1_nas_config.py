# coding: utf-8

"""
    Katib

    Swagger description for Katib  # noqa: E501

    The version of the OpenAPI document: v1beta1-0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubeflow.optimizer.configuration import Configuration


class V1beta1NasConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'graph_config': 'V1beta1GraphConfig',
        'operations': 'list[V1beta1Operation]'
    }

    attribute_map = {
        'graph_config': 'graphConfig',
        'operations': 'operations'
    }

    def __init__(self, graph_config=None, operations=None, local_vars_configuration=None):  # noqa: E501
        """V1beta1NasConfig - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._graph_config = None
        self._operations = None
        self.discriminator = None

        if graph_config is not None:
            self.graph_config = graph_config
        if operations is not None:
            self.operations = operations

    @property
    def graph_config(self):
        """Gets the graph_config of this V1beta1NasConfig.  # noqa: E501


        :return: The graph_config of this V1beta1NasConfig.  # noqa: E501
        :rtype: V1beta1GraphConfig
        """
        return self._graph_config

    @graph_config.setter
    def graph_config(self, graph_config):
        """Sets the graph_config of this V1beta1NasConfig.


        :param graph_config: The graph_config of this V1beta1NasConfig.  # noqa: E501
        :type: V1beta1GraphConfig
        """

        self._graph_config = graph_config

    @property
    def operations(self):
        """Gets the operations of this V1beta1NasConfig.  # noqa: E501


        :return: The operations of this V1beta1NasConfig.  # noqa: E501
        :rtype: list[V1beta1Operation]
        """
        return self._operations

    @operations.setter
    def operations(self, operations):
        """Sets the operations of this V1beta1NasConfig.


        :param operations: The operations of this V1beta1NasConfig.  # noqa: E501
        :type: list[V1beta1Operation]
        """

        self._operations = operations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1beta1NasConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1beta1NasConfig):
            return True

        return self.to_dict() != other.to_dict()
